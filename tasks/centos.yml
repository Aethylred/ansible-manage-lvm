---
- name: centos | installing lvm2
  package:
    name: lvm2
    state: present
  become: true

- name: centos | check for nvme devices
  shell: |
    set -o pipefail
    cat /proc/partitions | awk '{print $4}' | grep -q nvme. ; echo $?
  args:
    executable: /bin/bash
  register: blkdev_nvme
  changed_when: false

- name: centos | check for amazon ebs devices
  shell: |
    set -o pipefail
    lsblk -O -J | grep -qi "amazon elastic block store" ; echo $?
  register: blkdev_awsebs
  changed_when: false
  args:
    executable: /bin/bash

- name: centos | set flag for nvme subsystem
  set_fact:
    device_is_nvme: "{{ true if (blkdev_nvme.stdout == '0') else false }}"

- name: centos | set flag for aws ebs devices
  set_fact:
    device_is_awsebs: "{{ true if (blkdev_awsebs.stdout == '0') else false }}"

- name: Block to map renamed ec2 ebs nvmeXnY devices to their original sdX/xvdX names
  when: device_is_nvme and device_is_awsebs|bool
  become: true
  block:
    - name: centos | download nvme mapping binary helper
      get_url:
        url: "{{ ebsnvme_binary_helper_url }}"
        dest: "{{ ebsnvme_binary_helper_tmp }}/"
      changed_when: false

    - name: centos | extract binary helper
      unarchive:
        src: "{{ ebsnvme_binary_helper_tmp }}/{{ ebsnvme_binary_helper_file }}"
        dest: "{{ ebsnvme_binary_helper_tmp }}/"
        remote_src: yes
        mode: 0755
      changed_when: false

    - name: centos | copy binary helper
      copy:
        src: "{{ ebsnvme_binary_helper_tmp }}/go-ebsnvme"
        dest: "{{ ebsnvme_binary_helper_path }}"
        mode: a+x
        remote_src: yes

    - name: centos | template script helper
      template:
        src: 'ebsnvme-id.j2'
        dest: "{{ ebsnvme_scrip_helper_path }}"
        mode: a+x

    - name: centos | template udev rule
      template:
        src: '70-ec2-nvme-devices.rules.j2'
        dest: '/etc/udev/rules.d/70-ec2-nvme-devices.rules'
        mode: 0755
      register: udev_rule

    - name: centos | reload and trigger udev rules
      shell:
        cmd: udevadm control --reload-rules && udevadm trigger
      when: udev_rule.changed

- name: centos | installing sg3_utils
  package:
    name: sg3_utils
    state: present
  become: true

- name: centos | debug lvg
  debug:
    var: lv
    verbosity: 3
  loop: "{{ lookup('subelements', lvm_groups, 'lvnames', {'skip_missing': True}, wantlist=True) }}"
  loop_control:
    loop_var: lv

- name: centos | install xfs tools
  package:
    name: "xfsprogs"
    state: "present"
  become: true
  loop: "{{ lookup('subelements', lvm_groups, 'lvnames', {'skip_missing': True}, wantlist=True) }}"
  loop_control:
    loop_var: lv
  when:
    - lv.1 is defined
    - lv.1 != "None"
    - lv.1.filesystem is defined
    - lv.1.filesystem == "xfs"
    - lv.1.create is defined
    - lv.1.create|bool

- name: centos | checking for scsi devices
  command: sg_scan
  become: true
  register: scsi_devices
  changed_when: false

- name: centos | rescanning for new disks
  command: /usr/bin/rescan-scsi-bus.sh
  become: true
  changed_when: false
  when: scsi_devices.stdout|length > 0

- name: centos | rescanning for resized disks
  command: /usr/bin/rescan-scsi-bus.sh -s
  become: true
  changed_when: false
  when: scsi_devices.stdout|length > 0
